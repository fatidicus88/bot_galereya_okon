import asyncio
import sqlite3
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "7280451699:AAGHCaZSVWn7SEG9405gAjvDEilAWpdPdqY"
IMAGE_PATH = os.path.abspath("G:/fatidicus_ii_bot/images/start.png")  # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞
BALANCE58_IMAGE = os.path.abspath("G:/fatidicus_ii_bot/images/balans58.png")  # –ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ "–ë–∞–ª–∞–Ω—Å 58"
DB_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), "history.db")
MANAGER_ID = 533725804  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
user_accessories = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    try:
        print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DB_PATH}")
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        print("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã user_selections...")
        
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS user_selections (
            user_id INTEGER PRIMARY KEY,
            installation_location TEXT,
            temperature TEXT,
            noise_level TEXT,
            sunlight_preference TEXT,
            security_preference TEXT,
            accessories TEXT,
            phone_number TEXT
        )""")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ security_preference, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º
        cursor.execute("PRAGMA table_info(user_selections)")
        existing_columns = [column[1] for column in cursor.fetchall()]

        if "security_preference" not in existing_columns:
            print("–î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É security_preference –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
            cursor.execute("ALTER TABLE user_selections ADD COLUMN security_preference TEXT")
        
        conn.commit()
        print("–¢–∞–±–ª–∏—Ü–∞ user_selections —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
    finally:
        conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_user_data(user_id, column, value):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    cursor.execute("""
        INSERT OR IGNORE INTO user_selections (user_id) VALUES (?)
    """, (user_id,))

    # –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º –Ω—É–∂–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü
    cursor.execute(f"UPDATE user_selections SET {column} = ? WHERE user_id = ?", (value, user_id))

    conn.commit()
    conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_data(user_id):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
        SELECT installation_location, temperature, noise_level, sunlight_preference, security_preference, accessories
        FROM user_selections WHERE user_id = ?
    """, (user_id,))
    
    user_data = cursor.fetchone()
    conn.close()

    if user_data is None:
        print(f"‚ö† –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ!")
        return None

    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_data}")  # –û—Ç–ª–∞–¥–∫–∞
    return user_data

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_cmd(message: Message):
    if os.path.exists(IMAGE_PATH):
        await message.answer_photo(FSInputFile(IMAGE_PATH))
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Ä", callback_data="start_selection")]
        ]
    )
    
    await message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n"
        "–≠—Ç–æ —á–∞—Ç-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –í–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ!\n\n"
        "–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∞ –∞–ª–≥–æ—Ä–∏—Ç–º, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –∑–∞ –ø–∞—Ä—É –º–∏–Ω—É—Ç —É–∑–Ω–∞—Ç—å, –∫–∞–∫–æ–µ –æ–∫–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –í–∞—à–∏–º –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º.\n\n"
        "–ê –µ—â–µ –í—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É –≤ –ø–æ–¥–∞—Ä–æ–∫!",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Ä"
@dp.callback_query(lambda c: c.data == "start_selection")
async def ask_premises_type(callback: CallbackQuery):
    await callback.answer()
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ñ–∏–ª–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ", callback_data="residential")],
            [InlineKeyboardButton(text="–ù–µ–∂–∏–ª–æ–µ (–±–∞–Ω—è/–≥–∞—Ä–∞–∂/—Å–∫–ª–∞–¥)", callback_data="non_residential")]
        ]
    )
    await callback.message.answer("–í–∞—à–µ –æ–∫–Ω–æ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –∂–∏–ª–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ?", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–º–µ—â–µ–Ω–∏—è (–ñ–∏–ª–æ–µ)
@dp.callback_query(lambda c: c.data == "residential")
async def handle_residential(callback: CallbackQuery):
    await callback.answer()
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–í –∫–≤–∞—Ä—Ç–∏—Ä—É", callback_data="apartment")],
            [InlineKeyboardButton(text="–í –∫–æ—Ç—Ç–µ–¥–∂", callback_data="cottage")],
            [InlineKeyboardButton(text="–ù–∞ –¥–∞—á—É", callback_data="dacha")]
        ]
    )
    await callback.message.answer("–ù–∞—á–Ω–µ–º –Ω–∞—à–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –∫ –í–∞—à–µ–º—É –∏–¥–µ–∞–ª—å–Ω–æ–º—É –æ–∫–Ω—É! ü™ü\n\n–ö—É–¥–∞ –í—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –µ–≥–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–º–µ—â–µ–Ω–∏—è (–ù–µ–∂–∏–ª–æ–µ)
@dp.callback_query(lambda c: c.data == "non_residential")
async def handle_non_residential(callback: CallbackQuery):
    await callback.answer()
    await bot.send_chat_action(chat_id=callback.message.chat.id, action="typing")
    await asyncio.sleep(2)
    
    product_text = (
        "–ó–¥–µ—Å—å –º–Ω–µ –µ—Å—Ç—å —á—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å—Ä–∞–∑—É, –±–µ–∑ –¥–æ–ª–≥–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤!\n\n"
        "üîπ –ë–∞–ª–∞–Ω—Å 58 \n\n"
        "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å - –æ—Ç 10 706 —Ä—É–±–ª–µ–π*\n\n"
        "*–¶–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –∑–∞ –¥–≤—É—Ö—Å—Ç–≤–æ—Ä—á–∞—Ç–æ–µ –æ–∫–Ω–æ (1300√ó1400 –º–º) —Å –æ–¥–Ω–æ–π –ø–æ–≤–æ—Ä–æ—Ç–Ω–æ-–æ—Ç–∫–∏–¥–Ω–æ–π —Å—Ç–≤–æ—Ä–∫–æ–π, –±–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏.\n\n"
        "‚úÖ –¢—Ä–µ—Ö–∫–∞–º–µ—Ä–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∞—Å—Å–∞ ¬´–ë¬ª —à–∏—Ä–∏–Ω–æ–π 58 –º–º (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ì–û–°–¢ 23166-99).\n"
        "‚úÖ –û–¥–Ω–æ–∫–∞–º–µ—Ä–Ω—ã–π —Å—Ç–µ–∫–ª–æ–ø–∞–∫–µ—Ç ‚Äì –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ —Ü–µ–Ω–µ –∏ –∫–∞—á–µ—Å—Ç–≤—É.\n"
        "‚úÖ –§—É—Ä–Ω–∏—Ç—É—Ä–∞ —ç–∫–æ–Ω–æ–º-—Å–µ–≥–º–µ–Ω—Ç–∞ (2 —Ç–æ—á–∫–∏ –ø—Ä–∏–∂–∏–º–∞ ‚Äì –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –æ–∫–Ω–∞)."
    )
    
    await callback.message.answer(product_text)
    
    if os.path.exists(BALANCE58_IMAGE):
        await callback.message.answer_photo(FSInputFile(BALANCE58_IMAGE))
    
    await asyncio.sleep(2)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–º–µ—Ä", callback_data="schedule_measurement")],
            [InlineKeyboardButton(text="–ü–æ–∫–∞–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ", callback_data="better_option")],
            [InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ –ø–æ–¥–±–æ—Ä –∑–∞–Ω–æ–≤–æ", callback_data="restart")]
        ]
    )
    
    await callback.message.answer(
        "ü§ñ –•–æ—Ç–∏—Ç–µ, –∑–∞–ø–∏—à—É –≤–∞—Å –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π (–ø–æ –≥–æ—Ä–æ–¥—É) –∑–∞–º–µ—Ä?\n\n"
        "–≠—Ç–æ –í–∞—Å –Ω–∏ –∫ —á–µ–º—É –Ω–µ –æ–±—è–∂–µ—Ç!\n\n"
        "–ê –µ—â–µ —è –ø–æ–¥–∞—Ä—é –í–∞–º —Å–∫–∏–¥–∫—É –∏ –ø–æ–¥–∞—Ä–æ–∫!\n\n"
        "–ò–ª–∏ –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –í–∞–º –≤–∞—Ä–∏–∞–Ω—Ç —á—É—Ç—å –¥–æ—Ä–æ–∂–µ, –Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–∫–Ω–∞
@dp.callback_query(lambda c: c.data in ["apartment", "cottage", "dacha"])
async def handle_installation_location(callback: CallbackQuery):
    await callback.answer()
    await callback.message.delete()
    
    choices = {
        "apartment": "–≤ –∫–≤–∞—Ä—Ç–∏—Ä—É",
        "cottage": "–≤ –∫–æ—Ç—Ç–µ–¥–∂",
        "dacha": "–Ω–∞ –¥–∞—á—É"
    }
    user_choice = choices.get(callback.data, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ –±–∞–∑—É
    save_user_data(callback.from_user.id, "installation_location", user_choice)
    
    await callback.message.answer(f"ü§ñ –§–∏–∫—Å–∏—Ä—É—é *–±–∏–ø-–±–∏–ø*\n\n–°—Ç–∞–≤–∏–º –æ–∫–Ω–æ {user_choice}\n\n–ò–¥–µ–º –¥–∞–ª—å—à–µ!")
    
    # –í–æ–ø—Ä–æ—Å –ø—Ä–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
    temperature_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ó–∏–º–æ–π —Ö–æ–ª–æ–¥–Ω–æ", callback_data="cold_winter")],
            [InlineKeyboardButton(text="–õ–µ—Ç–æ–º –∂–∞—Ä–∫–æ", callback_data="hot_summer")],
            [InlineKeyboardButton(text="–ó–∏–º–æ–π —Ö–æ–ª–æ–¥–Ω–æ, –∞ –ª–µ—Ç–æ–º –∂–∞—Ä–∫–æ", callback_data="cold_and_hot")],
            [InlineKeyboardButton(text="–ö–æ–º—Ñ–æ—Ä—Ç–Ω–æ –∫—Ä—É–≥–ª—ã–π –≥–æ–¥", callback_data="comfortable")]
        ]
    )
    await callback.message.answer("–ì–ª–∞–≤–Ω–µ–π –≤—Å–µ–≥–æ - –ø–æ–≥–æ–¥–∞ –≤ –¥–æ–º–µ! üåà‚òÄ‚òî\n\n–ö–∞–∫ –æ–±—Å—Ç–æ—è—Ç –¥–µ–ª–∞ —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π —É –≤–∞—Å –¥–æ–º–∞?", reply_markup=temperature_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ –¥–æ–º–µ
@dp.callback_query(lambda c: c.data in ["cold_winter", "hot_summer", "cold_and_hot", "comfortable"])
async def handle_temperature_choice(callback: CallbackQuery):
    await callback.answer()
    await callback.message.delete()

    temperature_choices = {
        "cold_winter": "–ó–∏–º–æ–π —Ö–æ–ª–æ–¥–Ω–æ",
        "hot_summer": "–õ–µ—Ç–æ–º –∂–∞—Ä–∫–æ",
        "cold_and_hot": "–ó–∏–º–æ–π —Ö–æ–ª–æ–¥–Ω–æ, –∞ –ª–µ—Ç–æ–º –∂–∞—Ä–∫–æ",
        "comfortable": "–ö–æ–º—Ñ–æ—Ä—Ç–Ω–æ –∫—Ä—É–≥–ª—ã–π –≥–æ–¥"
    }
    user_temperature = temperature_choices.get(callback.data, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ –±–∞–∑—É
    save_user_data(callback.from_user.id, "temperature", user_temperature)

    await callback.message.answer(f"ü§ñ –ó–∞–ø–∏—Å–∞–ª!\n\n–£ –≤–∞—Å {user_temperature}\n\n–ò–¥–µ–º –¥–∞–ª—å—à–µ!")

    # –í–æ–ø—Ä–æ—Å –ø—Ä–æ —à—É–º
    noise_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞, –æ—á–µ–Ω—å —à—É–º–Ω–æ!", callback_data="very_noisy")],
            [InlineKeyboardButton(text="–®—É–º –Ω–µ–±–æ–ª—å—à–æ–π, –Ω–æ –≤—Å–µ —Ä–∞–≤–Ω–æ –º–µ—à–∞–µ—Ç", callback_data="some_noise")],
            [InlineKeyboardButton(text="–ù–µ—Ç, —É –Ω–∞—Å –æ—á–µ–Ω—å —Ç–∏—Ö–æ–µ –º–µ—Å—Ç–µ—á–∫–æ", callback_data="quiet_place")]
        ]
    )
    await callback.message.answer(
        "–î–∞–∂–µ —Ä–æ–±–æ—Ç—ã –∑–Ω–∞—é—Ç, —á—Ç–æ –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π –∏ —É—é—Ç–Ω–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –¥–æ–º–µ –≤–∞–∂–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ —à—É–º–∞ —Å —É–ª–∏—Ü—ã. üîàüîàüîà\n\n"
        "–ï—Å–ª–∏ –í–∞—à–∏ –æ–∫–Ω–∞ –≤—ã—Ö–æ–¥—è—Ç –Ω–∞ –æ–∂–∏–≤–ª–µ–Ω–Ω—É—é –¥–æ—Ä–æ–≥—É –∏–ª–∏ –¥–µ—Ç—Å–∫—É—é –ø–ª–æ—â–∞–¥–∫—É, –í—ã –ø–æ–Ω–∏–º–∞–µ—Ç–µ –æ —á–µ–º —Ä–µ—á—å.\n\n"
        "–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –±–µ—Å–ø–æ–∫–æ–∏—Ç –ª–∏ –í–∞—Å —à—É–º —Å —É–ª–∏—Ü—ã?", reply_markup=noise_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è —à—É–º–∞
@dp.callback_query(lambda c: c.data in ["very_noisy", "some_noise", "quiet_place"])
async def handle_noise_choice(callback: CallbackQuery):
    await callback.answer()
    await callback.message.delete()
    
    noise_choices = {
        "very_noisy": "–î–∞, –æ—á–µ–Ω—å —à—É–º–Ω–æ!",
        "some_noise": "–®—É–º –Ω–µ–±–æ–ª—å—à–æ–π, –Ω–æ –≤—Å–µ —Ä–∞–≤–Ω–æ –º–µ—à–∞–µ—Ç",
        "quiet_place": "–ù–µ—Ç, —É –Ω–∞—Å –æ—á–µ–Ω—å —Ç–∏—Ö–æ–µ –º–µ—Å—Ç–µ—á–∫–æ"
    }
    user_noise = noise_choices.get(callback.data)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
    save_user_data(callback.from_user.id, "noise_level", user_noise)

    await callback.message.answer(f"ü§ñ *–±–∏–∏–∏–ø* \n\n–ü–∏—à—É: \"{user_noise}\"\n\n–Ø –ø–æ—á—Ç–∏ –ø–æ–Ω—è–ª, –∫–∞–∫–æ–µ –æ–∫–Ω–æ –í–∞–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å!")

    # –í–æ–ø—Ä–æ—Å –ø—Ä–æ —Å–æ–ª–Ω—Ü–µ
    sunlight_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", callback_data="sunlight_yes")],
            [InlineKeyboardButton(text="–ù–µ—Ç, —Å–æ–ª–Ω—Ü–µ –º–Ω–µ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–µ –º–µ—à–∞–µ—Ç", callback_data="sunlight_no")]
        ]
    )
    await callback.message.answer(
        "‚òÄ –í–∏—Ç–∞–º–∏–Ω –î –æ—á–µ–Ω—å –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è!\n\n"
        "–û–¥–Ω–∞–∫–æ, –µ—Å–ª–∏ –í–∞—à–∏ –æ–∫–Ω–∞ –≤—ã—Ö–æ–¥—è—Ç –Ω–∞ —Å–æ–ª–Ω–µ—á–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É, —Ç–æ –∂–∞—Ä–∫–∏–º –ª–µ—Ç–æ–º —ç—Ç–æ –º–æ–∂–µ—Ç –¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞ –∏ –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç.\n\n"
        "–†–µ—à–∏—Ç—å —ç—Ç—É –ø—Ä–æ–±–ª–µ–º—É –ø–æ–∑–≤–æ–ª—è–µ—Ç –º—É–ª—å—Ç–∏—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–µ–∫–ª–æ–ø–∞–∫–µ—Ç.\n\n"
        "–°–∫–∞–∂–∏—Ç–µ, –í–∞–º –±—ã–ª–æ –±—ã –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —Ç–∞–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ?",
        reply_markup=sunlight_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç—ã
@dp.callback_query(lambda c: c.data in ["sunlight_yes", "sunlight_no"])
async def handle_sunlight_choice(callback: CallbackQuery):
    await callback.answer()
    await callback.message.delete()

    sunlight_choices = {
        "sunlight_yes": "–î–∞, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ",
        "sunlight_no": "–ù–µ—Ç, —Å–æ–ª–Ω—Ü–µ –º–Ω–µ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–µ –º–µ—à–∞–µ—Ç"
    }
    user_sunlight = sunlight_choices.get(callback.data)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
    save_user_data(callback.from_user.id, "sunlight_preference", user_sunlight)

    await asyncio.sleep(1)
    await callback.message.answer("ü§ñ –¢–∞–∫, —ç—Ç–æ —è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª!\n\n–ú—ã –ø–æ—á—Ç–∏ —É —Ü–µ–ª–∏!")

    # –í–æ–ø—Ä–æ—Å –ø—Ä–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    security_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞", callback_data="security_yes")],
            [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="security_no")]
        ]
    )
    await callback.message.answer(
        "üè∞ –ú–æ–π –¥–æ–º - –º–æ—è –∫—Ä–µ–ø–æ—Å—Ç—å!\n\n"
        "–ú—ã –≤—Å–µ–≥–¥–∞ —Ö–æ—Ç–∏–º —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –¥–æ–º–∞ –≤ –ø–æ–ª–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –£ –Ω–∞—Å –µ—Å—Ç—å –æ—Ç–ª–∏—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞—â–∏—Ç–µ –æ—Ç –≤–∑–ª–æ–º–∞. "
        "–≠—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∑–∞–≥–æ—Ä–æ–¥–Ω—ã—Ö –¥–æ–º–æ–≤ –∏ –∂–∏—Ç–µ–ª–µ–π –ø–µ—Ä–≤—ã—Ö —ç—Ç–∞–∂–µ–π.\n\n"
        "–°–∫–∞–∂–∏—Ç–µ, –í–∞–º —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ?",
        reply_markup=security_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
@dp.callback_query(lambda c: c.data in ["security_yes", "security_no"])
async def handle_security_choice(callback: CallbackQuery):
    await callback.answer()

    security_choices = {
        "security_yes": "–î–∞",
        "security_no": "–ù–µ—Ç"
    }
    user_security = security_choices.get(callback.data, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ –±–∞–∑—É
    save_user_data(callback.from_user.id, "security_preference", user_security)

    await asyncio.sleep(1)
    await callback.message.answer("ü§ñ –û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è –í–∞—à–µ–≥–æ –æ–∫–Ω–∞!")
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
    await ask_accessories(callback)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
async def ask_accessories(callback: CallbackQuery):
    await callback.answer()

    user_id = callback.from_user.id
    user_accessories[user_id] = []  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤

    await send_accessories_keyboard(callback.message, user_id)

async def send_accessories_keyboard(message, user_id):
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤—ã–±–æ—Ä–æ–º –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤."""
    accessories_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=("‚úÖ" if "–ú–æ—Å–∫–∏—Ç–Ω–∞—è —Å–µ—Ç–∫–∞" in user_accessories[user_id] else "‚òë") + " –ú–æ—Å–∫–∏—Ç–Ω–∞—è —Å–µ—Ç–∫–∞",
                callback_data="acc_mosquito")],
            [InlineKeyboardButton(
                text=("‚úÖ" if "–ü–æ–¥–æ–∫–æ–Ω–Ω–∏–∫" in user_accessories[user_id] else "‚òë") + " –ü–æ–¥–æ–∫–æ–Ω–Ω–∏–∫",
                callback_data="acc_windowsill")],
            [InlineKeyboardButton(
                text=("‚úÖ" if "–û—Ç–∫–æ—Å—ã" in user_accessories[user_id] else "‚òë") + " –û—Ç–∫–æ—Å—ã",
                callback_data="acc_slopes")],
            [InlineKeyboardButton(
                text=("‚úÖ" if "–î–µ—Ç—Å–∫–∏–π –∑–∞–º–æ–∫" in user_accessories[user_id] else "‚òë") + " –î–µ—Ç—Å–∫–∏–π –∑–∞–º–æ–∫",
                callback_data="acc_child_lock")],
            [InlineKeyboardButton(
                text=("‚úÖ" if "–°–∏—Å—Ç–µ–º–∞ —Å—Ç—É–ø–µ–Ω—á–∞—Ç–æ–≥–æ –ø—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–Ω–∏—è" in user_accessories[user_id] else "‚òë") +
                     " –°–∏—Å—Ç–µ–º–∞ —Å—Ç—É–ø–µ–Ω—á–∞—Ç–æ–≥–æ –ø—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–Ω–∏—è",
                callback_data="acc_ventilation")],
            [InlineKeyboardButton(
                text=("‚úÖ" if "–ù–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ" in user_accessories[user_id] else "‚òë") + " –ù–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ",
                callback_data="acc_nothing")],
            [InlineKeyboardButton(text="‚úî –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_accessories")]
        ]
    )

    await message.answer(
        "üîπ –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è –í–∞—à–µ–≥–æ –æ–∫–Ω–∞ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
        reply_markup=accessories_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
@dp.callback_query(lambda c: c.data.startswith("acc_"))
async def handle_accessory_choice(callback: CallbackQuery):
    await callback.answer()

    user_id = callback.from_user.id
    if user_id not in user_accessories:
        user_accessories[user_id] = []

    accessory_mapping = {
        "acc_mosquito": "–ú–æ—Å–∫–∏—Ç–Ω–∞—è —Å–µ—Ç–∫–∞",
        "acc_windowsill": "–ü–æ–¥–æ–∫–æ–Ω–Ω–∏–∫",
        "acc_slopes": "–û—Ç–∫–æ—Å—ã",
        "acc_child_lock": "–î–µ—Ç—Å–∫–∏–π –∑–∞–º–æ–∫",
        "acc_ventilation": "–°–∏—Å—Ç–µ–º–∞ —Å—Ç—É–ø–µ–Ω—á–∞—Ç–æ–≥–æ –ø—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–Ω–∏—è",
        "acc_nothing": "–ù–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ"
    }

    chosen_accessory = accessory_mapping.get(callback.data)

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ "–ù–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ", —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –¥—Ä—É–≥–∏–µ –≤—ã–±–æ—Ä—ã
    if callback.data == "acc_nothing":
        user_accessories[user_id] = ["–ù–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ"]
    else:
        if chosen_accessory in user_accessories[user_id]:
            user_accessories[user_id].remove(chosen_accessory)
        else:
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–ù–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ", —É–±–∏—Ä–∞–µ–º –µ–≥–æ
            if "–ù–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ" in user_accessories[user_id]:
                user_accessories[user_id].remove("–ù–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ")
            user_accessories[user_id].append(chosen_accessory)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
    await callback.message.delete()
    await send_accessories_keyboard(callback.message, user_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
@dp.callback_query(lambda c: c.data == "confirm_accessories")
async def confirm_accessories(callback: CallbackQuery):
    await callback.answer()

    user_id = callback.from_user.id
    selected_accessories = user_accessories.get(user_id, [])

    if not selected_accessories:
        selected_accessories = ["–ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ"]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    save_user_data(user_id, "accessories", ", ".join(selected_accessories))

    await callback.message.answer("‚úÖ –í–∞—à–∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –ø–æ–¥–±–µ—Ä—É –¥–ª—è –≤–∞—Å –∏–¥–µ–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ...")
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥–±–æ—Ä—É –æ–∫–Ω–∞
    await show_selected_window(callback)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –æ–∫–Ω–∞
async def show_selected_window(callback: CallbackQuery):
    user_id = callback.from_user.id
    selected_window = select_window(user_id)
    
    if selected_window:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ–∫–Ω–∞
        await callback.message.answer(
            f"ü§ñ –í–æ—Ç —á—Ç–æ —è –ø–æ–¥–æ–±—Ä–∞–ª –¥–ª—è –í–∞—Å:\n\n"
            f"üîπ {selected_window['name']}\n\n"
            f"{selected_window['description']}"
        )

        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        image_path = os.path.join(os.path.dirname(__file__), "images", selected_window["image"])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if os.path.exists(image_path):
            print("‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ...")
            await callback.message.answer_photo(FSInputFile(image_path))
        else:
            print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å.")
            await callback.message.answer("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")

        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–º–µ—Ä –∏–ª–∏ –ø—Ä–æ–π—Ç–∏ –ø–æ–¥–±–æ—Ä –∑–∞–Ω–æ–≤–æ
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–º–µ—Ä", callback_data="schedule_measurement")],
                [InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ –ø–æ–¥–±–æ—Ä –∑–∞–Ω–æ–≤–æ", callback_data="restart")]
            ]
        )
        await callback.message.answer(
            "ü§ñ –•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–º–µ—Ä –∏–ª–∏ –ø—Ä–æ–π—Ç–∏ –ø–æ–¥–±–æ—Ä –∑–∞–Ω–æ–≤–æ?",
            reply_markup=keyboard
        )
    else:
        await callback.message.answer("ü§ñ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –ø–æ–¥–æ–±—Ä–∞—Ç—å –æ–∫–Ω–æ –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –æ–∫–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def select_window(user_id):
    """–§—É–Ω–∫—Ü–∏—è –ø–æ–¥–±–∏—Ä–∞–µ—Ç –æ–∫–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DB_PATH}")
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("""
        SELECT installation_location, temperature, noise_level, sunlight_preference, security_preference
        FROM user_selections WHERE user_id = ?
    """, (user_id,))
    
    user_data = cursor.fetchone()
    conn.close()

    if not user_data:
        return None  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None

    installation_location, temperature, noise_level, sunlight_preference, security_preference = user_data

    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    print(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
    print(f"–ú–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {installation_location}")
    print(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}")
    print(f"–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞: {noise_level}")
    print(f"–°–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–∞: {sunlight_preference}")
    print(f"–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {security_preference}")

    # --- –ü–æ–¥–±–æ—Ä –æ–∫–Ω–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º ---

    # üîπ –ü—Ä–µ–º–∏—É–º 70 (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    # –£—Å–ª–æ–≤–∏–µ: "–î–∞, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ" –¥–ª—è —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç—ã
    if sunlight_preference == "–î–∞, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ":
        return {
            "name": "–ü—Ä–µ–º–∏—É–º 70",
            "description": (
                "–ü—Ä–µ–º–∏—É–º 70 - –æ–∫–Ω–æ –ø—Ä–µ–º–∏—É–º-–∫–ª–∞—Å—Å–∞ –¥–ª—è –∫–≤–∞—Ä—Ç–∏—Ä –∏ –∑–∞–≥–æ—Ä–æ–¥–Ω—ã—Ö –¥–æ–º–æ–≤. "
                "‚úÖ –ü—è—Ç–∏–∫–∞–º–µ—Ä–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∞—Å—Å–∞ ¬´–ê¬ª (–≥–∞—Ä–∞–Ω—Ç–∏—è 40 –ª–µ—Ç). "
                "‚úÖ –î–≤—É—Ö–∫–∞–º–µ—Ä–Ω—ã–π –º—É–ª—å—Ç–∏—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–µ–∫–ª–æ–ø–∞–∫–µ—Ç (—Ç–µ–ø–ª–æ+—à—É–º–æ–∏–∑–æ–ª—è—Ü–∏—è). "
                "‚úÖ –ê–≤—Å—Ç—Ä–∏–π—Å–∫–∞—è —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞ —Å–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∫–ª–∏–º–∞—Ç-–∫–æ–Ω—Ç—Ä–æ–ª—è."
                "\n\nüí∞ –¶–µ–Ω–∞: –æ—Ç 14 923 —Ä—É–±–ª–µ–π."
            ),
            "image": "premium70.png"
        }

    # üîπ –ö–æ–º—Ñ–æ—Ä—Ç-–ª–∞–π—Ç 58
    # –£—Å–ª–æ–≤–∏–µ: "–∫–≤–∞—Ä—Ç–∏—Ä–∞" –∏–ª–∏ "–¥–∞—á–∞", "–ö–æ–º—Ñ–æ—Ä—Ç–Ω–æ –∫—Ä—É–≥–ª—ã–π –≥–æ–¥", "—Ç–∏—Ö–æ–µ –º–µ—Å—Ç–µ—á–∫–æ", "—Å–æ–ª–Ω—Ü–µ –Ω–µ –º–µ—à–∞–µ—Ç", "–Ω–µ—Ç" –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if (installation_location in ["–≤ –∫–≤–∞—Ä—Ç–∏—Ä—É", "–Ω–∞ –¥–∞—á—É"] and
        temperature == "–ö–æ–º—Ñ–æ—Ä—Ç–Ω–æ –∫—Ä—É–≥–ª—ã–π –≥–æ–¥" and
        noise_level == "–ù–µ—Ç, —É –Ω–∞—Å –æ—á–µ–Ω—å —Ç–∏—Ö–æ–µ –º–µ—Å—Ç–µ—á–∫–æ" and
        sunlight_preference == "–ù–µ—Ç, —Å–æ–ª–Ω—Ü–µ –º–Ω–µ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–µ –º–µ—à–∞–µ—Ç" and
        security_preference == "–ù–µ—Ç"):
        return {
            "name": "–ö–æ–º—Ñ–æ—Ä—Ç-–ª–∞–π—Ç 58",
            "description": (
                "–ö–æ–º—Ñ–æ—Ä—Ç-–ª–∞–π—Ç 58 - —ç–∫–æ–Ω–æ–º–∏—á–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –∫–≤–∞—Ä—Ç–∏—Ä –∏ –¥–∞—á. "
                "‚úÖ –¢—Ä–µ—Ö–∫–∞–º–µ—Ä–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∞—Å—Å–∞ ¬´–ë¬ª. "
                "‚úÖ –û–¥–Ω–æ–∫–∞–º–µ—Ä–Ω—ã–π —Å—Ç–µ–∫–ª–æ–ø–∞–∫–µ—Ç (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–ø–ª—ã—Ö –¥–æ–º–æ–≤). "
                "‚úÖ –ù–µ–º–µ—Ü–∫–∞—è —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞ —Å –º–∏–∫—Ä–æ–≤–µ–Ω—Ç–∏–ª—è—Ü–∏–µ–π."
                "\n\nüí∞ –¶–µ–Ω–∞: –æ—Ç 11 939 —Ä—É–±–ª–µ–π."
            ),
            "image": "komfortlite58.jpg"
        }

    # üîπ –ö–æ–º—Ñ–æ—Ä—Ç 58 (–≤–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö)
    return {
        "name": "–ö–æ–º—Ñ–æ—Ä—Ç 58",
        "description": (
            "–ö–æ–º—Ñ–æ—Ä—Ç 58 - –æ—Ç–ª–∏—á–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∫–≤–∞—Ä—Ç–∏—Ä—ã –∏–ª–∏ –¥–∞—á–∏. "
            "‚úÖ –¢—Ä–µ—Ö–∫–∞–º–µ—Ä–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∞—Å—Å–∞ ¬´–ê¬ª (–≥–∞—Ä–∞–Ω—Ç–∏—è 40 –ª–µ—Ç). "
            "‚úÖ –î–≤—É—Ö–∫–∞–º–µ—Ä–Ω—ã–π —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–≥–∞—é—â–∏–π —Å—Ç–µ–∫–ª–æ–ø–∞–∫–µ—Ç. "
            "‚úÖ –ù–µ–º–µ—Ü–∫–∞—è —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞ —Å –º–∏–∫—Ä–æ–≤–µ–Ω—Ç–∏–ª—è—Ü–∏–µ–π."
            "\n\nüí∞ –¶–µ–Ω–∞: –æ—Ç 14 553 —Ä—É–±–ª–µ–π."
        ),
        "image": "comfort58.png"
    }

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–π—Ç–∏ –ø–æ–¥–±–æ—Ä –∑–∞–Ω–æ–≤–æ"
@dp.callback_query(lambda c: c.data == "restart")
async def restart_selection(callback: CallbackQuery):
    await callback.answer()
    await start_cmd(callback.message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–º–µ—Ä"
@dp.callback_query(lambda c: c.data == "schedule_measurement")
async def schedule_measurement(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer(
        "ü§ñ –û—Ç–ª–∏—á–Ω–æ, –∑–∞–ø–∏—Å—ã–≤–∞—é –í–∞—Å –Ω–∞ –∑–∞–º–µ—Ä!\n\n"
        "–ö—Å—Ç–∞—Ç–∏, –∫–∞–∫ –æ–±–µ—â–∞–ª - –¥–∞—Ä—é –í–∞–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É 3% –Ω–∞ –í–∞—à –∑–∞–∫–∞–∑! üòä –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ - \"–†–æ–±–æ—Ç\". –°–æ–æ–±—â–∏—Ç–µ –µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É."
    )
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤–Ω–∏–∑—É –∫–Ω–æ–ø–∫–∞).", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message(lambda message: message.contact)
async def handle_contact(message: Message):
    user_id = message.from_user.id
    phone_number = message.contact.phone_number

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–∞–∑—É
    save_user_data(user_id, "phone_number", phone_number)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = get_user_data(user_id)

    if not user_data:
        await message.answer("–û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.")
        return

    installation_location, temperature, noise_level, sunlight_preference, security_preference, accessories = user_data

     # –ï—Å–ª–∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –ø—É—Å—Ç—ã–µ, –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"
    accessories_text = accessories if accessories else "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    manager_message = (
        f"üîî **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–º–µ—Ä!**\n\n"
        f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:** {user_id}\n"
        f"üè† **–ú–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:** {installation_location}\n"
        f"üå° **–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:** {temperature}\n"
        f"üîä **–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞:** {noise_level}\n"
        f"‚òÄ **–°–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–∞:** {sunlight_preference}\n"
        f"üîí **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:** {security_preference}\n"
        f"üõ† **–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã:** {accessories_text}\n"
        f"üìû **–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:** {phone_number}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
    await bot.send_message(MANAGER_ID, manager_message)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
    await message.answer("‚úÖ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è!")

async def main():
    init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())